* Go configuration üêπ

Let's install go-mode and configure it.

   #+BEGIN_SRC emacs-lisp
     ;;(exec-path-from-shell-copy-env "GOPATH")
     ;;(exec-path-from-shell-copy-env "GO15VENDOREXPERIMENT")
     (setenv "GOPATH" "/home/vincent/go")
     (use-package go-mode
       :ensure t
       :config
       (bind-key "C-h f" 'godoc-at-point go-mode-map)
       (bind-key "C-c C-u" 'go-remove-unused-imports go-mode-map)
       (bind-key "C-c C-i" 'go-godoc-history go-mode-map))
   #+END_SRC

   And install stuffs, like autocomplete, documentation, errorcheck, tests.

   #+BEGIN_SRC emacs-lisp
     (use-package company-go
       :ensure t
       :config (add-to-list 'company-backends 'company-go))
     (use-package go-eldoc
       :ensure t
       :config (add-hook 'go-mode-hook 'go-eldoc-setup))
     (use-package gotest
       :ensure t
       :init
       (bind-key "C-c r" 'go-run go-mode-map)
       (bind-key "C-c t C-g a" 'go-test-current-project go-mode-map)
       (bind-key "C-c t m" 'go-test-current-file go-mode-map)
       (bind-key "C-c t ." 'go-test-current-test go-mode-map)
       (bind-key "C-c t c" 'go-test-current-coverage go-mode-map)
       (bind-key "C-c t b" 'go-test-current-benchmark go-mode-map)
       (bind-key "C-c t C-g b" 'go-test-current-project-benchmarks go-mode-map))
     (use-package golint
       :ensure t)
     (use-package go-guru
       :load-path "~/lib/go/src/golang.org/x/tools/cmd/guru"
       :config
       (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
     (use-package go-rename
       :bind ("C-c r" . go-rename)
       :load-path "~/lib/go/src/golang.org/x/tools/refactor/rename")
#+END_SRC

   Setup the go-mode hook to activate =gofmt= on save and co.
   co.

   #+BEGIN_SRC emacs-lisp
     (defun my-go-mode-hook ()
       (setq gofmt-command "gofmts")
       (add-hook 'before-save-hook 'gofmt-before-save)
       (if (not (string-match "go" compile-command))
           (set (make-local-variable 'compile-command)
                "go build -v && go test -v && go vet")))
     (add-hook 'go-mode-hook 'my-go-mode-hook)
   #+END_SRC


   Let's also define some hooks that can be registered as =save-hook=
   or =local-write-files-hooks= for example.


   #+BEGIN_SRC emacs-lisp
     (defun vde/go-test-after-save-hook ()
       "A file save hook that will run go test on the current package
     whenever a file is saved. Use it with local variables and go-mode
     for example."
       (unless (ignore-errors (go-test-current-test))
         (unless (ignore-errors (go-test-current-file))
           (go-test-current-project))))
   #+END_SRC

   It's really easy to use : just put the following in a
   =.dir-locals.el= in =$GOPATH/src/= and magics happens.

   #+BEGIN_SRC emacs-lisp :tangle no
     ((go-mode . ((eval . (add-hook 'after-save-hook 'vde/go-test-after-save-hook nil t)))))
   #+END_SRC

* Automatically invoke tangle on save

This is the magic line(s) to make the tangle on save automatic.

#+BEGIN_SRC emacs-lisp :tangle no
# Local Variables:
# eval: (when (fboundp #'tangle-if-config) (add-hook 'after-save-hook #'tangle-if-config))
# End:
#+END_SRC

# Local Variables:
# eval: (when (fboundp #'tangle-if-config) (add-hook 'after-save-hook #'tangle-if-config))
# End:
